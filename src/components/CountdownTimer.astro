---
// Puedes cambiar esta fecha a la que necesites
const defaultTargetDate = "2024-12-31T23:59:59";

const { targetDate = defaultTargetDate } = Astro.props;

const timeUnits = ['days', 'hours', 'minutes', 'seconds'];
---

<div class="countdown-container max-w-4xl mx-auto bg-[#2F2F2F] rounded-xl p-8 mb-12 shadow-lg opacity-0 scale-90" data-target-date={targetDate}>
  <h2 class="text-3xl font-semibold mb-4 text-center text-[#edc418]">Countdown to Innovation</h2>
  <div class="grid sm:grid-cols-4 md:grid-cols-4 lg:grid-cols-4 xl:grid-cols-4 2xl:grid-cols-4 gap-4 text-center">
    {timeUnits.map((unit) => (
      <div class="bg-[#7A4F9E] rounded-lg p-4">
        <div class="text-4xl font-bold mb-2 text-white" data-value={unit}>00</div>
        <div class="text-sm uppercase">{unit}</div>
      </div>
    ))}
  </div>
</div>

<style>
  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .countdown-container {
    animation: fadeInScale 0.5s forwards;
  }
</style>

<script>
  function updateCountdown() {
    const countdowns = document.querySelectorAll<HTMLElement>('.countdown-container');
    
    countdowns.forEach(countdown => {
      const targetDateAttr = countdown.getAttribute('data-target-date');
      if (!targetDateAttr) return;

      const targetDate = new Date(targetDateAttr).getTime();
      const timeElements = {
        days: countdown.querySelector<HTMLElement>('[data-value="days"]'),
        hours: countdown.querySelector<HTMLElement>('[data-value="hours"]'),
        minutes: countdown.querySelector<HTMLElement>('[data-value="minutes"]'),
        seconds: countdown.querySelector<HTMLElement>('[data-value="seconds"]')
      };

      function update() {
        const now = new Date().getTime();
        const distance = targetDate - now;

        if (distance < 0) {
          countdown.innerHTML = '<p class="text-2xl text-center text-[#00B5D4]">Â¡El evento ha comenzado!</p>';
          return;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        const timeValues = { days, hours, minutes, seconds };

        Object.entries(timeValues).forEach(([unit, value]) => {
          if (timeElements[unit]) {
            timeElements[unit].textContent = value.toString().padStart(2, '0');
          }
        });
      }

      update();
      setInterval(update, 1000);
    });
  }

  updateCountdown();
  document.addEventListener('astro:page-load', updateCountdown);
</script>